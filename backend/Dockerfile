# Создать образ на основе базового слоя,
# который содержит файлы ОС и интерпретатор Python 3.9.
FROM python:3.9

# Переходим в образе в директорию /app: в ней будем хранить код проекта.
# Если директории с указанным именем нет, она будет создана. 
# Название директории может быть любым.
WORKDIR /app
# Дальнейшие инструкции будут выполняться в директории /app

RUN pip install gunicorn==20.1.0


# Скопировать с локального компьютера файл зависимостей
# в текущую директорию (текущая директория — это /app).
COPY requirements.txt .

# Выполнить в текущей директории команду терминала
# для установки зависимостей.
# Если не использовать параметр --no-cache-dir, 
# то pip сохранит в служебной директории (прямо в образе) копии пакетов,
# а это будет лишним грузом.
RUN pip install -r requirements.txt --no-cache-dir

# Скопировать всё необходимое содержимое 
# той директории локального компьютера, где сохранён Dockerfile,
# в текущую рабочую директорию образа — /app.
COPY . .

# в Dockerfile срабатывает только одна инструкция CMD. Если этих инструкций несколько, выполнится только та, что записана последней;
# При старте контейнера запустить сервер разработки.
CMD ["python", "manage.py", "runserver", "0:8000"]


# А вот если бы этой утилиты по каким-то причинам в образе не было, при сборке образа возникла бы ошибка: «Вызвана утилита, которой нет в системе!»
# Утилиту pip в Linux можно установить отдельной командой из терминала — точно так же эту утилиту можно установить и в образе!
# Следовательно, перед тем, как вызвать pip, пришлось бы её установить с помощью дополнительной инструкции RUN:
# # В образе нет нужной утилиты? Ок, установим её!
# # Обратите внимание: sudo тут не нужен, так как внутри контейнера
# # все команды выполняются от имени root
# RUN apt -y install python3-pip
# # Вот теперь можно обратиться к pip...
# RUN pip install -r /app/requirements.txt --no-cache-dir
# # ...и команда выполнится без ошибок. 